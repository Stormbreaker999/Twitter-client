// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String?
  email           String    @unique
  profileImageURL String?
  followers       Follows[] @relation("follower")
  following       Follows[] @relation("following")
  likedTweets     Likes[]   @relation("likedBy")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tweets          Tweet[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Likes {
  likedBy      User   @relation("likedBy", fields: [likedById], references: [id])
  likedById    String
  likedTweet   Tweet  @relation("likedTweet", fields: [likedTweetId], references: [id])
  likedTweetId String

  @@id([likedById, likedTweetId])
}

model Tweet {
  id         String   @id @default(cuid())
  content    String
  imageURL   String?
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  usersLiked Likes[]  @relation("likedTweet")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
